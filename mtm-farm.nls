;; The main purpose of this breed is to aggregate income, costs, and profits and store them
;; TO CONSIDER: Potentially should be moved to the farmer since this breed does not do much!

farms-own [
  the-land                ;; patch-set of patches of this farmer, this farm, or this holding
  farm-type               ;; farm type of farm - one of farm-types global
  farm-type-0
  
  my-farmer               ;; farmer who owns/runs farm

  current-profit          ;; most recent profit of farm summed across patches
  current-income          ;; most recent income of farm summed across patches
  current-costs           ;; most recent costs of farm summed across patches
  my-metrics
  total-loans
  current-debt
  debt-payments
  debt-maturity
  dsr
  
  current-profit-0        ;; variables at model initialisation for quick reset
  current-income-0
  current-costs-0
  my-metrics-0
  total-loans-0
  current-debt-0
  debt-payments-0
  debt-maturity-0
  dsr-0
]

;; farm 'constructor'
to initialise-farm
  ;; will be called by the farmer who is 'myself' in this context
  set my-farmer myself
  set shape "circle 3"
  set hidden? false
  set label farm-type
  set label-color ifelse-value show-labels? [table:get colour-key "label"] [[0 0 0 0]]
  set my-metrics table:make
end

to update-environmental-metrics-of-farm
  foreach sort table:keys env-metrics [ metric ->
    table:put my-metrics metric sum [table:get my-metrics metric] of [my-holdings] of my-farmer
  ]
end

;; note that this is also runnable by a holding...
to-report in-breach? [metric]
  report table:get my-metrics metric / count the-land > table:get (table:get env-metrics metric) "limit"
end

to update-income-and-costs-of-farm
  set current-income sum [current-income] of [my-holdings] of my-farmer
  set current-costs sum [current-costs] of [my-holdings] of my-farmer
end

;; farm profit is simple sum of the contributions from its holdings
to finalise-profit-of-farm
  let gross-profit current-income - current-costs
  let debt-payments-owing get-debt-payments-owing
  ifelse total-loans > 0 [
    ifelse gross-profit >= debt-payments-owing [
      service-debt
      set current-profit gross-profit - debt-payments-owing
    ]
    [
      add-to-debt (debt-payments-owing - gross-profit)
      set current-profit 0
    ]
  ]
  [
    set current-profit gross-profit
  ]
  set dsr debt-payments / current-income
end

to set-initial-debt-of-farm [maturity]
  let m table:get table:get initial-debt-service-ratios farm-type "mean"
  let s table:get table:get initial-debt-service-ratios farm-type "sd"
  set debt-payments precision (random-normal m s * current-income) 0
  set total-loans get-principal-from-payment debt-payments interest-rate mortgage-term
  set debt-maturity maturity
  set current-debt get-principal-remaining total-loans interest-rate mortgage-term debt-maturity
end

to-report get-debt-payments-owing
  if debt-maturity >= mortgage-term [ report 0 ]
  let x debt-maturity + years-per-tick
  let proportion-owing
    ifelse-value x > mortgage-term [ 1 + (mortgage-term - x) / years-per-tick ] [ 1 ]
  report round (debt-payments * proportion-owing)
end

to add-to-debt [x]
  set total-loans round ((get-principal-remaining total-loans interest-rate mortgage-term debt-maturity) + x)
  set debt-payments get-loan-repayments total-loans interest-rate mortgage-term
  set debt-maturity 0
  set current-debt total-loans
end

to service-debt
  set debt-maturity debt-maturity + years-per-tick
  ifelse debt-maturity >= mortgage-term [
    set total-loans 0
    set current-debt 0
    set debt-payments 0
    set debt-maturity 0
  ]
  [
    set current-debt get-principal-remaining total-loans interest-rate mortgage-term debt-maturity
  ]
end

;; The MIT License (MIT)
;;
;; Copyright (c) 2023-25 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.
