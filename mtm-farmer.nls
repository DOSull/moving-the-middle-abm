farmers-own [
  the-land         ;; patch-set of patches of this farmer, this farm, or this holding
  farm-type        ;; farm-type - one of the global farm-types       
  disposition      ;; for-profit, pro-environmental, pro-social (not used at present
  age              ;; age controls succession probabilities see age-and-succeed-farmer
  succession-stage ;; how many times this farmer has moved on... they don't die they
                   ;; are just succeeded - this matters to the rapid reset functionality
  my-interventions ;; 1-0 matrix of interventions adopted by landuse
  
  my-farm          ;; farm turtle of this farmer's farm
  my-holdings      ;; turtle-set of holdings of this farmer
  
  farm-type-0      ;; initial values stored to allow easy reset
  disposition-0
  age-0
  succession-stage-0
  my-interventions-0
]


;; farmer 'constructor'
to initialise-farmer
  set size 2
  set color table:get colour-key "farmer"
  set shape "person"
  set hidden? true
  set disposition get-disposition
  set succession-stage 0
  set my-interventions matrix:make-constant (length farm-types) (length mgmt-intervention-types) 0
end


;; farmer age might be set by a relatively complex procedure so 
;; delegate to this reporter
to-report get-new-farmer-age [model-initialisation?]
  ;; this gives us a reasonable(ish) age distribution at least for now
  ifelse model-initialisation? 
  ;; age distribution of initial population skews older than that of new entrants
  [ report 21 + random-beta-binomial 70 5 4 ]
  [ report 21 + random-beta-binomial 45 4 2 ]
end


to-report get-disposition
  report first rnd:weighted-one-of-list dispositions [ [p] -> last p ]
end


;; make links between farmers based on proximity
to make-farmer-local-links
  ;; make twice as many as we need to choose from
  let n-options n-local-links * 2  
  let locals other (turtle-set [the-owner] of patch-set flatten-list [neighbors4] of the-land)
  let r 0
  ifelse any? locals
  [ set r max [distance myself] of locals + 5 ]
  [ set r 5 ]
  ;; if we didn't get enough then widen the search until we do
  if count locals < n-options [
    while [count locals < n-options] [
      set locals other (turtle-set locals farmers in-radius r)
      set r r + 5
    ]
  ]
  set locals n-of n-local-links locals
  create-local-links-with locals [ 
    set color table:get colour-key "local-link" 
    set hidden? true
  ]
end

;; make links between farmers in the catchment (don't care about similarities)
to make-farmer-catchment-links
  let colleagues n-of n-catchment-links (other farmers with [not member? self [link-neighbors] of myself])
  create-catchment-links-with colleagues [ 
    set color table:get colour-key "catchment-link"
    set hidden? true
  ]
end

;; make links between farmers in the catchment (don't care about similarities)
to make-farmer-disposition-links
  let colleagues n-of n-disposition-links (
    other farmers with [not member? self [link-neighbors] of myself and 
                        disposition = [disposition] of myself]
  )
  create-disposition-links-with colleagues [ 
    set color table:get colour-key "disposition-link"
    set hidden? true
  ]
end


;; age farmer by 1 year, then determine if they die/leave/otherwise exit
;; the 'new' farmer is not actually a new farmer, just the old one with a new age...
to age-and-succeed-farmer
  ;; don't create a new farmer, just change age and
  ;; consider some other changes
  set age ifelse-value age + years-per-tick > 90 [90] [age + years-per-tick] 
  ;; they have five chances to leave at probability 1/(91-age) as they age
  ;; which comes out to a single chance at probability 5/(91-age) 
  if age > 90 or random-float 1 < (years-per-tick / (91 - age)) [ succeed-farmer ]
end

to succeed-farmer
  set age get-new-farmer-age false
  set succession-stage succession-stage + 1
  set disposition get-disposition
  let ft-now farm-type
  ;; new farmer considers changing the farm type if any holdings are loss-making
  ;; without regard to how long losses have been happening, and with no 'down-weight'
  if landuse-change-on-succession? and (any? my-holdings with [current-profit < 0] or [current-profit] of my-farm <= 0) [
    let options consider-farm-type-change 1 "Succession: "
    if length options > 0 [ make-farm-type-changes options ]
  ]
  ask my-farm [
    set-initial-debt-of-farm 0
  ]
end


;; reporter to get the plurality landuse type of the farmer
;; if two or more are equally prevalent pick one at random
to-report majority-farm-type
  let counts map [x -> sum x] transpose [matrix-column-sums landuse-luc-profile] of my-holdings
  let max-count max counts
  let max-indices filter [i -> item i counts = max-count] range length farm-types
  report one-of slice farm-types max-indices
end


to do-survival
  ;; if things are really bad then consider exit / change of landuse
  let ft-now farm-type
  let farm-conversion-options []
  let loss-making-holdings get-loss-making-holdings
  if any? loss-making-holdings [
    if [current-profit] of my-farm <= 0 [ ;; losing lots of money so consider complete change
      let down-weight ifelse-value apply-severity-of-losses?
        [ 1 - (sum [count the-land] of loss-making-holdings) / count the-land ] [ 1 ]
      set farm-conversion-options consider-farm-type-change down-weight "Losing money: "
    ]
    ;; only some holdings are losing money so consider forestry on those
    let holding-change-options consider-holdings-farm-type-change loss-making-holdings prioritise-forestry?
    make-farm-type-changes (sentence farm-conversion-options holding-change-options)
  ]
end


to do-constrained-change
  ;; consider landuse change on loss-making holdings
  ;; consider tactical changes
  ;; if things are really bad then consider exit / change of landuse
  let ft-now farm-type
  let farm-conversion-options []
  let loss-making-holdings get-loss-making-holdings
  if any? loss-making-holdings [
    ;; only some holdings are losing money so consider forestry on those
    let holding-change-options consider-holdings-farm-type-change loss-making-holdings prioritise-forestry?
    make-farm-type-changes holding-change-options
  ]
end


to do-optimisation
  ;; consider all possible management interventions
  ;; if things are really bad then consider exit / change of landuse
  let ft-now farm-type
  if any? my-holdings with [any-interventions-to-do?] [
    ;; this reports a [holding [intervention-type probability]] list
    let potential-changes consider-management-changes "Management change: "
    ;; which we pass to make-management-changes
    if length potential-changes > 0 [ make-management-changes potential-changes ]
  ]
end


;; report turtle set of all holdings losing money
to-report get-loss-making-holdings
  report my-holdings with [current-profit < 0]
end


;; reports true if all holdings are loss making
to-report all-holdings-loss-making?
  report all-true? [current-profit < 0] of my-holdings
end


;; get a list of all the metrics which this farmer's farms is in breach of
to-report get-breached-metrics
  report filter [m -> [in-breach? m] of my-farm] table:keys env-metrics
end


;; get turtle-set of holdings in breach on this farm
to-report get-holdings-in-breach [metrics]
  let holdings-in-breach turtle-set nobody
  foreach metrics [ m ->
    set holdings-in-breach (turtle-set holdings-in-breach my-holdings with [in-breach? m])
  ]
  report holdings-in-breach
end


;; returns threshold for the supplied intervention
;; this or a wrapper for this could include farmer demography 'shifts'
;; or social/geographic network shifts
to-report get-adoption-probability [i-type]
  report table:get (table:get (table:get base-thresholds disposition) i-type) farm-type
end


;; reports list of possible changes in landuse by holding and an associated probability
;; the list items are
;;
;;   [[holdings-to-change-set "all-of-farm" from-farm-type to-farm-type] relative-probability]
;; 
;; The all-of-farm flag tells later steps to apply all these together
;; Change to Forest is not considered in this case
to-report consider-farm-type-change [down-weight prefix]
  if show-events? [
    with-local-randomness [ ;; the reporter here invokes the RNG
      show (word prefix "Considering changing landuse because holdings profits are " 
                 [precision (current-profit / count the-land) 1] of get-loss-making-holdings)
    ]
  ]
  ;; for convenience record this farmer's farmer-type
  let ft farm-type
  ;; only other farm-types are options for change - and Forest is not an option
  let options filter [new-ft -> new-ft != ft and ft != "Forest"] farm-types
  if apply-suitability? [
    ;; only landuses suitable for the typical land on the farm are considered
    let luc-constraint round mean [luc-code] of (the-land with [landuse = ft])
    set options filter-farm-types-by-luc options luc-constraint
  ]
  let affected-holdings my-holdings with [farm-type = ft]
  set options map [new-ft -> 
    (list (list affected-holdings "all-of-farm" ft new-ft) 
          (down-weight * table:get table:get farm-type-change-probs ft new-ft))
  ] options
  report options
end


;; reports list of possible changes in landuse for the supplied set of holdings
;; the list items are
;;
;;   [[holding-set-of-one "one-holding" from-farm-type to-farm-type] relative-probability]
;;
;; Change to Forest is an option and is the only option if forestry-only? is true
to-report consider-holdings-farm-type-change [holdings-under-consideration forestry-only?]
  let options []
  ask holdings-under-consideration [
    let ft farm-type
    ifelse forestry-only? [
      set options lput (list (list (turtle-set self) "one-holding" farm-type "Forest") 
                             (table:get table:get farm-type-change-probs farm-type "Forest")) options
    ]
    [
      let new-possible-farm-types filter [nft -> nft != farm-type] farm-types
      if apply-suitability? [
        let luc-constraint round mean [luc-code] of (the-land with [landuse = ft]) 
        set new-possible-farm-types filter-farm-types-by-luc new-possible-farm-types luc-constraint
      ]
      foreach new-possible-farm-types [ nft ->
        set options lput (list (list (turtle-set self) "one-holding" farm-type nft) 
                               (table:get table:get farm-type-change-probs farm-type nft)) options
      ]
    ]
  ]
  report options
end


;; reports only farm-types/landuses suitable on the specified limiting LUC
to-report filter-farm-types-by-luc [fts limiting-luc]
  report filter [nft -> table:get (table:get farm-type-suitabilities limiting-luc) nft = 1] fts
end


;; given a list of options per the consider-farm-type-change or consider-forestry reporters
;; picks one and potentially applies it
to make-farm-type-changes [possible-changes] 
  if show-events? [ show "Entered make-farm-type-changes" ]
  let changes-to-make rnd:weighted-one-of-list possible-changes [ [p] -> last p ]
  if random-float 1 < last changes-to-make [
    let [holdings-to-change change-type current-farm-type new-farm-type] first changes-to-make
    ask holdings-to-change [
      if show-events? [ show "Show considering holdings changes" ]
      holding-change-farm-type new-farm-type
    ]
    ifelse change-type = "all-of-farm" [
      if show-events? [ show "Making all of farm change" ]
      set farm-type new-farm-type
      ask my-farm [ set farm-type new-farm-type ]
    ]
    [
      set farm-type majority-farm-type
      ask my-farm [ set farm-type [ farm-type ] of myself ]
    ]  
  ]
end


;; loop through holdings with interventions remaining to be done
;; calculate associated probability of adoption for all interventions remaining on each holding
;; pick one by weighted probability and add it to the options output
;; the list returned to the calling context will be
;; [
;;   [ holding1 [ intervention probability ] ]
;;   [ holding2 [ intervention probability ] ]
;;     ...
;; ]
to-report consider-management-changes [prefix]
  let options []
  let network-nudges nobody
  ifelse include-networks? 
  [ set network-nudges get-network-nudges 1 rel-weight-locals rel-weight-catchment rel-weight-disposition]
  [ set network-nudges get-network-nudges 1 0 0 0]
  ask my-holdings with [any-interventions-to-do?] [
    let ft farm-type
    ;; list the interevention types that are to be considered
    let to-consider available-interventions-as-list
    ;; get nudge score for this intervention from the holding
    let nudges map [poss -> [get-intervention-score poss] of self] to-consider
    ;; the network nudge scores for the landuse on this holding 
    let to-consider-idxs map [x -> position x mgmt-intervention-types] to-consider
    let nwk-nudges map [i -> item i matrix:get-row network-nudges position ft farm-types] to-consider-idxs
    ;; get the base probabilities for this farmer (which might be changeable over time)
    let base-probs map [poss -> [ get-adoption-probability poss ] of myself] to-consider
    ;; adjust probabilities using the sigmoid function
    let new-probs (map [[prob nudge nwk-nudge] -> nudged-probability prob (nudge + nwk-nudge)] base-probs nudges nwk-nudges)
    if show-events? [
      show farm-type
      show to-consider
      show map [s -> precision s 3] nudges
      show map [s -> precision s 3] nwk-nudges
      show map [p -> precision p 3] base-probs
      show map [p -> precision p 3] new-probs
    ]
    ;; put results in a list of tuples [[<INTERVENTION> <PROBABILITY>]], select one
    ;; by weighted random draw and return it to the calling context
    let management-changes (map list to-consider new-probs)
    set options lput (list self rnd:weighted-one-of-list management-changes [ [p] -> last p ]) options
  ]
  report options
end


;; reports a combined nudge based on the proportion of holdings that have taken
;; up various interventions by landuse type weighted somehow
to-report get-network-nudges [w1 w2 w3 w4]
  ifelse include-networks? [
    let farm-interventions        w1 matrix:* my-interventions
    let local-interventions       w2 matrix:* sum-matrices [my-interventions] of local-link-neighbors
    let catchment-interventions   w3 matrix:* sum-matrices [my-interventions] of catchment-link-neighbors
    let disposition-interventions w4 matrix:* sum-matrices [my-interventions] of disposition-link-neighbors
    report sum-matrices (list farm-interventions local-interventions catchment-interventions disposition-interventions)
  ]
  [ report w1 matrix:* my-interventions ]
end


;; probabilistically make changes in the supplied [holding [intervention prob]]
;; list. All are considered but only applied on passing the associated probability test
to make-management-changes [possible-changes] 
  foreach possible-changes [ change ->
    let [the-holding i-prob] change
    let [i-type prob] i-prob
    if random-float 1 < prob [
      if show-events? [ show (word "Implementing " i-type " on " the-holding) ]
      ask the-holding [ implement-intervention i-type ]
    ]
  ]
end


;; ----------------------------------------------------------------------------
;; sigmoid function related
;; ----------------------------------------------------------------------------

;; see https://en.wikipedia.org/wiki/Sigmoid_function
;; the argument a increases the slope at (0, 0.5)
to-report sigmoid [x a]
  report 1 / (1 + exp (a * (- x)))
end


;; see https://en.wikipedia.org/wiki/Logit
;; inverse of the sigmoid function - used to determine
;; where on the sigmoid a given probability lies
;; The 'epsilon correction' for 0 and 1 avoids errors from
;; overflow/underflow even if introduces slight errors
;; but hey! nothing is impossible, nor a sure thing!
to-report logit [p a]
  (ifelse
    p = 0.5 [ report 0 ]
    p = 1 [ report logit (1 - epsilon) a ]
    p = 0 [ report logit epsilon a ]
    [ report ln (p / (1 - p)) / a ])
end


;; reports revised probability from 'nudging' initial
;; initial probability p along a sigmoid curve
to-report nudged-probability [p nudge]
  let centre logit p sigmoid-slope
  report sigmoid (centre + nudge) sigmoid-slope
end


;; The MIT License (MIT)
;;
;; Copyright (c) 2023-25 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

