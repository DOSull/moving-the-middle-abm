farmers-own [
  the-land                ;; patch-set of patches of this farmer, this farm, or this holding
  farm-type
  farm-type-0

  my-farm                 ;; farm turtle of this farmer's farm
  my-holdings
  
  disposition
  age
]

;; farmer 'constructor'
to initialise-farmer
  set size 2
  set color table:get colour-key "farmer"
  set shape "person"
  set hidden? true
  set farm-type one-of farm-types
  set disposition one-of dispositions
  set-farmer-age 
end

to set-farmer-age
  ;; this gives us a reasonable(ish) age distribution at least for now
  set age random-negative-binomial-with-mean-vmr 45 2.5
end

to make-farmer-local-links 
  let locals other (turtle-set [the-owner] of patch-set flatten-list [neighbors4] of the-land)
  if count locals < 10 [
    set locals other (turtle-set locals farmers in-radius 30)
  ]
  if count locals > 6 [
    set locals n-of 6 locals
  ]
  create-local-links-with locals [ 
    set color table:get colour-key "local-link" 
    set hidden? not show-local-links? 
  ]
end

to make-farmer-industry-links
  let colleagues n-of 6 (other farmers with [ farm-type != [farm-type] of myself ])
  create-industry-links-with colleagues [ 
    set color table:get colour-key "industry-link"
    set hidden? not show-industry-links?
  ]
end

to age-and-succeed-farmer
  let new-farmer nobody
  set age age + 1
  if random 80 < age [
    hatch-farmers 1 [
      set disposition one-of dispositions
      ;; successor farmer must replace dying farmer wrt farm and holdings
      ask my-farm [set my-farmer myself]
      ask my-holdings [set my-farmer myself]
      set-farmer-age
    ]
    die
    ask new-farmer [
      let options consider-farm-type-change [] 1 "Succession: " false
      if length options > 0 [ make-farm-type-changes options ]
    ]
  ]
end

to-report majority-farm-type
  let counts map [t -> count my-holdings with [farm-type = t]] farm-types
  let max-count max counts
  let max-indices filter [i -> item i counts = max-count] n-values length farm-types [i -> i]
  let max-types map [i -> item i farm-types] max-indices
  report one-of max-types
end

to-report get-loss-making-holdings
  report my-holdings with [current-profit < 0]
end

to-report all-holdings-loss-making?
  report count get-loss-making-holdings = count my-holdings
end

;; returns threshold for the supplied intervention
;; this or a wrapper for this could include farmer demography 'shifts'
;; or social/geographic network shifts
to-report get-adoption-probability [i-type]
  report table:get (
    table:get base-thresholds i-type
  ) farm-type
end

;; adds additional options to the provided list
;; the list items are
;;
;;   [[holdings-to-change-set "all-of-farm"|"one-holding" from-farm-type to-farm-type] relative-probability]
;;
to-report consider-farm-type-change [options down-weighting prefix show-messages?]
  if show-messages? [
    show (word prefix "Considering changing landuse because holdings profits are " 
               [precision (current-profit / count the-land) 1] of get-loss-making-holdings)
  ]
  let ft farm-type
  let new-options filter [t -> t != "Forest" and t != ft] farm-types
  if length new-options = 0 [ report options ]
  let worst-luc max map [p -> max [luc-code] of p] ([the-land] of (my-holdings with [farm-type = ft]))
  set new-options filter [t -> table:get table:get farm-type-suitabilities worst-luc t = 1] new-options
  let affected-holdings my-holdings with [farm-type = ft]
  if length new-options = 0 [ report options ]
  set new-options map [t -> (list (list affected-holdings "all-of-farm" ft t) 
                                  (down-weighting * table:get table:get farm-type-change-probs ft t))] new-options
  report (sentence options new-options)
end

;; adds additional options to the provided list
;; the list items are
;;
;;   [[holdings-to-change-set "all-of-farm"|"one-holding" from-farm-type to-farm-type] relative-probability]
;;
to-report consider-forestry [options prefix show-messages?]
  if show-messages? [
    show (word prefix "Considering forestry on holdings with profits " 
               [precision (current-profit / count the-land) 1] of get-loss-making-holdings)
  ]
  let new-options []
  ask my-holdings with [current-profit < 0] [
    let luc-boost mean [luc-code] of the-land / 8
    set new-options lput (list (list (turtle-set self) "one-holding" farm-type "Forest") 
                               (luc-boost * table:get table:get farm-type-change-probs farm-type "Forest")) new-options
  ]
  report (sentence options new-options)
end

to make-farm-type-changes [possible-changes] 
  let changes-to-make rnd:weighted-one-of-list possible-changes [ [p] -> last p ]
  if random-float 1 < last changes-to-make [
    change-holdings-farm-types item 0 changes-to-make
  ]
  set farm-type majority-farm-type
  ask my-farm [ set farm-type [ farm-type ] of myself ]
end

to change-holdings-farm-types [change-list]
  let holdings-to-change item 0 change-list
  let change-type item 1 change-list
  let current-farm-type item 2 change-list
  let new-farm-type item 3 change-list
  ask holdings-to-change [
    holding-change-farm-type new-farm-type
  ]
  if change-type = "all-of-farm" [
    set farm-type new-farm-type
    ask my-farm [ set farm-type new-farm-type ]
  ]
end

to change-holdings-types [change-list]
  let holdings-to-change item 0 change-list
  let current-farm-type item 2 change-list
  let new-farm-type item 3 change-list
  ask holdings-to-change [
    holding-change-farm-type new-farm-type
  ]
end

;; loop through holdings with interventions remaining to be done
;; calculate associated probability of adoption for all interventions remaining on each holding
;; pick one by weighted probability and add it to the options output
;; the list returned to the calling context will be
;; [
;;   [ holding1 [ intervention probability ] ]
;;   [ holding2 [ intervention probability ] ]
;;     ...
;; ]
to-report consider-management-changes [prefix show-messages?]
  let options []
  ask my-holdings with [any-interventions-to-do?] [
    let ft farm-type
    ;; list the interevention types that are to be considered
    let to-consider available-interventions-as-list
    ;; get nudge score for this intervention from the farm
    let scores map [poss -> [get-intervention-score poss show-messages?] of self] to-consider
    ;; get the base probabilities for this farmer (which might be changeable over time)
    let base-probs map [poss -> get-adoption-probability poss] to-consider
    ;; adjust probabilities using the sigmoid function
    let new-probs (map [[prob score] -> nudged-probability prob score] base-probs scores)
    if show-messages? [
      show farm-type
      show to-consider
      show map [s -> precision s 4] scores
      show map [p -> precision p 4] base-probs
      show map [p -> precision p 4] new-probs
    ]
    ;; put results in a list of tuples [[<INTERVENTION> <PROBABILITY>]], select one
    ;; by weighted random draw and return it to the calling context
    let management-changes (map list to-consider new-probs)
    set options lput (list self rnd:weighted-one-of-list management-changes [ [p] -> last p ]) options
  ]
  report options
end

;; probabilistically make changes in the supplied [holding [intervention prob]]
;; list. All are considered but only applied on passing the associated probability test
to make-management-changes [possible-changes] 
  foreach possible-changes [ change ->
    let the-holding        item 0 change
    let i-type      item 0 item 1 change
    let prob        item 1 item 1 change
    if random-float 1 < prob [
      if show-events? [ show (word "Implementing " i-type " on " the-holding) ]
      ask the-holding [ implement-intervention i-type ]
    ]
  ]
end


;; -----------------------------------------
;; sigmoid function related
;; -----------------------------------------

;; see https://en.wikipedia.org/wiki/Sigmoid_function
;; the argument a increases the slope at (0, 0.5)
to-report sigmoid [x a]
  report 1 / (1 + exp (a * (- x)))
end

;; see https://en.wikipedia.org/wiki/Logit
;; inverse of the sigmoid function - used to determine
;; where on the sigmoid a given probability lies
;; The 'epsilon correction' for 0 and 1 avoids errors from
;; overflow/underflow even if introduces slight errors
;; but hey! nothing is impossible, nor a sure thing!
to-report logit [p a]
  (ifelse
    p = 0.5 [ report 0 ]
    p = 1 [ report logit (1 - epsilon) a ]
    p = 0 [ report logit epsilon a ]
    [ report ln (p / (1 - p)) / a ])
end

;; reports revised probability from 'nudging' initial
;; initial probability p along a sigmoid curve
to-report nudged-probability [p nudge]
  let centre logit p sigmoid-slope
  report sigmoid (centre + nudge) sigmoid-slope
end


;; The MIT License (MIT)
;;
;; Copyright (c) 2023-24 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

