;; ----------------------------------------------------------------------------
;; many scenario and spatial setup parameters are in files not the UI
;; ----------------------------------------------------------------------------

;; initialise various folders - here for convenient modification in one place
to setup-folders
  let base-data-folder    join-string (list pathdir:get-model-path "data") pathdir:get-separator
  set output-data-folder  join-string (list base-data-folder "output")     pathdir:get-separator
  set market-data-folder  join-string (list base-data-folder "market")     pathdir:get-separator
  set spatial-data-folder join-string (list base-data-folder "spatial")    pathdir:get-separator
end


;; ----------------------------------------------------------------------------
;; farmer (behavioural) parameter setup
;; ----------------------------------------------------------------------------

;; we read the interventions by farm types file thrice...
to setup-farmer-parameters
  ;; Assumes a CSV organised with farm types as column headings,
  ;; interventions as row names, i.e, (spaces added for clarity)
  ;;
  ;;                  , SNB, Dairy, Forest, Crop
  ;; Build_Wetland    , 0.7, 0.75,  0.3,    0.5
  ;; Riparian_Planting, 0.7, 0.75,  0.2,    0.4
  ;; Clean_Races      , 0.2, 0.7,   0,      0
  ;; Farm_Plan        , 0.7, 0.85,  0.4,    0.6
  ;; Join_ETS         , 0.2, 0.2,   0.9,    0.4
  ;;
  read-metrics-from-file                 join-string (list market-data-folder "environmental-metrics.csv")    pathdir:get-separator
  read-farm-types-from-file              join-string (list market-data-folder "farmer-threshold-matrix.csv")  pathdir:get-separator
  read-interventions-from-file           join-string (list market-data-folder "farmer-threshold-matrix.csv")  pathdir:get-separator
  read-farmer-thresholds-from-file       join-string (list market-data-folder "farmer-threshold-matrix.csv")  pathdir:get-separator
  read-intervention-impacts-from-files  
  read-farm-type-change-probs-from-file  join-string (list market-data-folder "conversion-probabilities.csv") pathdir:get-separator
end

;;
to read-metrics-from-file [file]
  set env-metrics table:make
  carefully [
    print word "Reading required metrics from " file
    file-open file
    let header file-read-line
    let vars but-first csv:from-row header
    while [not file-at-end?] [
      let line file-read-line
      if not (first line = "#") [
        let data csv:from-row line
        table:put env-metrics (first data) table:from-list (map list vars but-first data)
      ]
    ]
    file-close
  ]
  [
    user-message word "ERROR: problem reading required metrics from " file
    file-close
  ]
end

;; setup farm types and interventions
to read-farm-types-from-file [file]
  carefully [
    print word "Reading farm types from " file
    file-open file
    set farm-types sort but-first csv:from-row file-read-line
    file-close
  ]
  [
    user-message word "ERROR: problem reading farm types from thresholds data file " file
    file-close
  ]
end

;; setup interventions
to read-interventions-from-file [file]
  let names []
  carefully [
    print word "Reading intervention types from " file
    file-open file
    let skip file-read-line
    while [not file-at-end?] [ set names lput item 0 csv:from-row file-read-line names ]
    file-close
    set mgmt-intervention-types sort names
    foreach mgmt-intervention-types [ i -> output-print i ]
  ]
  [
    user-message word "ERROR: problem reading intervention types from thresholds data file " file
    file-close
  ]
end

;; setup baseline probability of adoption of interventions by farm type
to read-farmer-thresholds-from-file [file]
  ;; CSV file looks like this (spacing added for clarity)
  ;;
  ;;                   , SNB, Dairy, Forest, Crop
  ;;  Build_Wetland    , 0.7,  0.75,    0.3,  0.5
  ;;  Riparian_Planting, 0.7,  0.75,    0.2,  0.4
  ;;  Clean_Races      , 0.2,  0.7 ,    0  ,  0
  ;;  Farm_Plan        , 0.7,  0.85,    0.4,  0.6
  ;;  Join_ETS         , 0.2,  0.2 ,    0.9,  0.4
  ;;
  ;; resulting table is read by
  ;;   table-get (table:get base-thresholds INTERVENTION-NAME) FARM-TYPE
  set base-thresholds table:make
  carefully [
    print word "Reading farmer adoption thresholds from file " file
    file-open file
    let the-farm-types but-first csv:from-row file-read-line
    let order get-order the-farm-types farm-types
    let the-interventions []
    let the-values []
    while [not file-at-end?] [
      let data csv:from-row file-read-line
      set the-interventions lput item 0 data the-interventions
      set the-values lput table:from-list reorder (map list the-farm-types (but-first data)) order the-values
    ]
    set order get-order the-interventions mgmt-intervention-types
    set base-thresholds table:from-list reorder (map list the-interventions the-values) order
    file-close
  ]
  [
    user-message word "ERROR: problem reading the farmer thresholds data file " file
    file-close
  ]
end

;; 
to read-intervention-impacts-from-files
  set mgmt-interventions table:make 
  let impacts-to-read (sentence ["costs" "yields"] table:keys env-metrics)
  foreach impacts-to-read [ impact ->
    let fname join-list (list market-data-folder (word impact "-intervention-impacts.csv")) pathdir:get-separator
    let impacts read-intervention-impacts-from-file fname
    table:put mgmt-interventions impact impacts
  ] 
end

to-report read-intervention-impacts-from-file [file]
  let result nobody
  let impacts nobody
  carefully [
    print word "Reading intervention impacts from " file
    file-open file
    let the-farm-types but-first csv:from-row file-read-line
    let order get-order the-farm-types farm-types
    let i-types []
    set impacts []
    while [not file-at-end?] [
      let data csv:from-row file-read-line
      set i-types lput item 0 data i-types ;; [ "Clean races" "Build wetland" ... ] 
      set data but-first data              ;; [ numbers by farm-type ]
      set impacts lput table:from-list 
        reorder (map list the-farm-types (map [x -> replace-na x] data)) order impacts
    ] ;; [ {"SNB" -> xx, "Dairy" -> yy ...} ]
    file-close
    set order get-order i-types mgmt-intervention-types
    set result table:from-list reorder (map list i-types impacts) order
  ]
  [
    user-message word "ERROR: problem reading interventions impacts file " file
    file-close
  ]
  report result
end

to read-farm-type-change-probs-from-file [file]
  ;; These are <something like> the impact on profit of switching from the type
  ;; in the row name to the type in the column name
  ;; Farm types may be in any order, but ROWS AND COLUMNS MUST BE IN SAME ORDER
  ;;       , SNB, Dairy, Forest, Crop
  ;; SNB   ,   0,   0.5,    0.1,  0.8
  ;; Dairy , 0.5,     0,    0.2,  0.8
  ;; Forest,   1,   0.5,      0,    1
  ;; Crop  , 0.8,     1,    0.2,    0
  let row-names []
  let rows-data []
  carefully [
    print word "Reading farm type change costs from file " file
    file-open file
    let the-farm-types but-first csv:from-row file-read-line
    let order get-order the-farm-types farm-types
    while [not file-at-end?] [
      let data csv:from-row file-read-line
      let from-type item 0 data
      set row-names lput from-type row-names
      set rows-data lput table:from-list reorder (map list the-farm-types (but-first data)) order rows-data
    ]
    file-close
    set farm-type-change-probs table:make
    foreach reorder (map list row-names rows-data) order [ ft-data ->
      table:put farm-type-change-probs item 0 ft-data item 1 ft-data
    ]
  ]
  [
    user-message word "ERROR: problem reading farm type change costs data file " file
    file-close
  ]
end
  
to-report replace-na [x]
  report ifelse-value x = "NA" [na-value] [x]
end

to-report replace [x y z]
  report ifelse-value x = y [z] [x]
end 


;; ----------------------------------------------------------------------------
;; economic setup procedures
;; ----------------------------------------------------------------------------
to setup-economic-parameters
  with-local-randomness [
    ifelse seed-setup-rng?
    [ random-seed rng-economics ]
    [ random-seed timer ]
    read-production-function-parameters
  ]
end

to read-production-function-parameters
  let yields get-parameter-from-file join-string (list market-data-folder "yields.csv") pathdir:get-separator
  set yield-means         matrix:from-row-list map [t -> table:values t] table:values item 0 yields
  set yield-sds           matrix:from-row-list map [t -> table:values t] table:values item 1 yields
          
  let costs get-parameter-from-file join-string (list market-data-folder "costs.csv")   pathdir:get-separator
  set cost-means          matrix:from-row-list map [t -> table:values t] table:values item 0 costs
  set cost-sds            matrix:from-row-list map [t -> table:values t] table:values item 1 costs
  
  set env-metric-means table:make
  set env-metric-sds table:make
  foreach sort table:keys env-metrics [ metric ->
    let metric-vals get-parameter-from-file join-string (list market-data-folder (word metric ".csv")) pathdir:get-separator
    table:put env-metric-means metric matrix:from-row-list map [t -> table:values t] table:values item 0 metric-vals
    table:put env-metric-sds   metric matrix:from-row-list map [t -> table:values t] table:values item 1 metric-vals
  ]
    
  set prices get-prices join-string (list market-data-folder "prices.csv") pathdir:get-separator
end

;; return mean and sd tables for a parameter from a file
to-report get-parameter-from-file [file]
  ;; each parameter CSV file has the same format
  ;; shown here with spaces added for clarity, and
  ;; extending to 8 LUC levels. Cols can be in any order
  ;; BUT LUC mean/sd rows MUST be as shown.
  ;;
  ;;          , SNB , Dairy, Forest, Crop
  ;; LUC1_Mean, 3500,  9500,   4000, 3000
  ;; LUC1_SD  ,  700,  1900,    800,  600
  ;; LUC2_Mean, 2650,  8050,   4000, 2850
  ;; LUC2_SD  ,  530,  1610,    800,  570
  ;; LUC3_Mean, 1625,  7350,   3850, 2675
  ;; LUC3_SD  ,  325,  1470,    770,  535
  ;;   ... and so on to LUC8 ...
  ;;
  ;; Returned tables are readable as
  ;;   table:get (table:get TABLE LUC-CODE) FARM-TYPE
  let means-table table:make
  let sds-table table:make
  carefully [
    print word "Reading parameters from " file
    file-open file
    let the-farm-types but-first csv:from-row file-read-line
    let order get-order the-farm-types farm-types
    let luc 1
    while [not file-at-end?] [
      ;; read the LUCx_Mean line
      let means-data but-first csv:from-row file-read-line
      let means table:from-list reorder (map list the-farm-types means-data) order
      table:put means-table luc means
      ;; read the LUCx_SD line
      let sds-data but-first csv:from-row file-read-line
      let sds table:from-list reorder (map list the-farm-types sds-data) order
      table:put sds-table luc sds
      set luc luc + 1
    ]
    file-close
  ]
  [
    user-message word "ERROR: failed while reading parameter file " file
    file-close
  ]
  report (list means-table sds-table)
end

to-report get-prices [file]
  ;; the CSV for prices and emissions taxes looks like this
  ;; (spacing addded for clarity). No checking that the rows
  ;; are in this order
  ;;
  ;;                ,SNB,Dairy, Forest, Crop
  ;; Price_Commodity,  5,  7.5,   157,   0.5
  ;; Price_GhG      , 25, 25  ,    25,  25
  ;; Price_Nleach   ,  0,  0  ,     0,   0
  ;;  ... other redundant lines ...
  ;;
  ;; NOTE: the taxes part of this has been replaced by a slider
  ;; since carbon taxes are a fixed price across all landuses
  ;;
  let price-data nobody
  carefully [
    print word "Reading prices from " file
    file-open file
    let the-farm-types but-first csv:from-row file-read-line
    let order get-order the-farm-types farm-types
    set price-data col-matrix reorder but-first csv:from-row file-read-line order
    file-close
  ]
  [
    user-message word "ERROR: problem reading prices file " file
    file-close
  ]
  report price-data
end

;; There is potential in matrix approaches for speeding up the calculations, perhaps even making them more 
;; 'sophisticated'. However some of this may come at the cost of (i) less readable code, and (ii) less 
;; variance. On (ii) specifically there is now no base patch level variance, i.e. the mean yield, emissions
;; and input costs of every patch of given landuse and LUC combination is effectively identical - not 
;; initialised with the supplied SD. The SD is applied to patches each round BUT AT HOLDING LEVEL. That is,
;; every patch on a given holding with given LU/LUC experiences same deviation from mean outcomes in a 
;; particular year. But a neighbouring holding might experience quite different deviations.
to make-matrix-copies-of-some-data
  ;; a column matrix with one element per landuse/farm-type
;  set m-prices col-matrix table:values prices

  set intervention-cost-impacts intervention-farm-type-tbl-to-mtx mgmt-interventions "costs" false
  set intervention-yield-impacts intervention-farm-type-tbl-to-mtx mgmt-interventions "yields" true

  set intervention-env-impacts table:make
  foreach sort table:keys env-metrics [ metric ->
    table:put intervention-env-impacts metric intervention-farm-type-tbl-to-mtx mgmt-interventions metric true
  ]
end

to-report intervention-farm-type-tbl-to-mtx [tbl impact multiplicative?]
  ;; impact will be one of 'costs', 'yields', 'ghg-emissions' or any of the environmental-impacts
  let impacts table:get tbl impact
  let rows []
  foreach mgmt-intervention-types [ intervention ->
    let impacts-by-farm-type table:get impacts intervention
    let effects map [ft -> table:get impacts-by-farm-type ft] farm-types
    set effects map [x -> replace x na-value 0] effects
    if multiplicative? [
      set effects map [x -> x + 1] effects
    ]
    set rows lput effects rows
  ]
  report matrix:from-row-list rows
end


;; The MIT License (MIT)
;;
;; Copyright (c) 2023-25 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.