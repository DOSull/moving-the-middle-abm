;; -----------------------------------------
;; landscape setup
;; NOTE: this includes the farmers not just
;;       LUC codes
;; -----------------------------------------

;; this works OK, but might not be sensible to do... still considered EXPERIMENTAL!
;; note that set-world-size kills all turtles so this must
;; be done BEFORE any turtles are initialised
to setup-world-dimensions
  let cell-size 3
  let ncols 270
  let nrows 400
  let raster-pixel-resolution 3 ;; i.e. the patch cellsize in the NetLogo view
  ;; if initialising from geospatial data we override some of these defaults
  if setup-geography-from-files? [
    print "Getting model dimensions from GIS data"
    ;; read dimensions of the raster from header of an Esri raster .asc file
    ;; which looks like this
    ;;
    ;; ncols         623
    ;; nrows         1201
    ;; xllcorner     1883097.0153
    ;; yllcorner     5676986.4123
    ;; cellsize      100
    ;; NODATA_value  -9999
    ;;
    carefully [
      file-open word spatial-data-folder "luc.asc"
      set ncols read-from-string item 1 split-string file-read-line " "
      set nrows read-from-string item 1 split-string file-read-line " "
      let skip file-read-line
      set skip file-read-line
      set raster-pixel-resolution read-from-string item 1 split-string file-read-line " "
      file-close
    ]
    [
      file-close
      print (word "Problem reading " spatial-data-folder "luc.asc")
    ]
  ]
  let x-extent ncols * raster-pixel-resolution
  let y-extent nrows * raster-pixel-resolution
  let x-scale x-extent / max-dimension ;; max-dimension is in the UI
  let y-scale y-extent / max-dimension
  let sf max (list x-scale y-scale)
  let x (list 0 (round (x-extent / sf) - 1))
  let y (list 0 (round (y-extent / sf) - 1))
  print join-string (list "Setting world dimensions:" ncols nrows "\n"
                           "               cellsize:" raster-pixel-resolution "extents:" x-extent y-extent "\n"
                           "                 scales:" x-scale y-scale sf "NetLogo window:" x y) " "
  resize-world item 0 x item 1 x item 0 y item 1 y
  print (word "Setting model dimensions to " x " by " y )
  set-patch-size cell-size * max-dimension / max (list world-width world-height)
  ask patches [ set pcolor grey ]
end

;; invoked at setup, delegates the initialisation of the landscape to either a random process
;; or reading in from geospatial data files; other steps are the same for either method
to setup-geography
  with-local-randomness [
    ifelse setup-geography-from-files?
    [ setup-geography-from-files ]
    [ setup-random-geography ]
    ;; the above will return patches tagged with temp-id which we use to determine farms
    label-connected-regions (list farm-land) [x -> [temp-id] of x] true ;;"temp-id"
    ;; after labelling farm id is in region-id patch variable so apply it to farm-id
    ask farm-land [set farm-id region-id]
    ;; remove farms of one pixel
    merge-singletons farm-land [x -> [farm-id] of x] [[x y] -> ask x [set farm-id [farm-id] of y]] ;;"farm-id"
    ;; label sub-farms by luc-code - this could be based on something else
    ;; not that here we send each farm as a separate patch-set 
    let psets map [id -> farm-land with [farm-id = id]] remove-duplicates [farm-id] of farm-land
    label-connected-regions psets [p -> [luc-code] of p] false
    ask farm-land [set holding-id region-id]
    ;; now set up patch, farmer, farm, holding relations
    setup-farmers
    setup-farms
    setup-holdings
    ;; assign-patches-to-farmers
    ;; assign-farms-to-farmers
    ;; label sub-farms by luc-code - this could be based on something else
    ;; not that here we send each farm as a separate patch-set 
    ;; label-connected-regions [the-land] of farms [x -> [luc-code] of x] ;;"luc-code"
    ;; set the sub-farm-id to the region-id tags produced by the labelling
    ask farm-land [set holding-id region-id]
    colour-patches true
  ]
end

;; set things up from supplied LUC and parcels geospatial datasets
to setup-geography-from-files
  carefully [
    print (word "Reading LUC data from " spatial-data-folder "luc.asc")
    set luc-data gis:load-dataset word spatial-data-folder "luc.asc"
    print (word "Reading farm data from " spatial-data-folder "parcels.shp")
    set parcels-data gis:load-dataset word spatial-data-folder "parcels.shp"
  ]
  [
    print "ERROR: problem reading spatial data"
  ]
  gis:apply-raster luc-data luc-code
  ;; there's a gis extension issue related to NANs
  ;; see https://github.com/NetLogo/GIS-Extension/issues/5
  ;;     https://github.com/NetLogo/NetLogo/issues/894   
  set farm-land patches with [not is-nan? luc-code and luc-code > 0]
  colour-patches false
  display ;; do this early for reassurance...
  let bgcolor table:get colour-key "background"
  set not-farm-land patches with [pcolor = bgcolor]

  ;; setup farms based on distinct parcels identified by ID in the parcels data
  ;; This relies on a STR_ID variable which is unique string for each farm parcel
  ;; IT IS IMPORTANT THAT THIS BE A STRING!!! because of automatic interpolation that 
  ;; GIS extension applies when assigning values from a shapefile to patches only partly 
  ;; contained in polygons - strings are 'interpolated' by a plurality rule, not averaging
  ;; of some kind which is meaningless for numerical IDs
  gis:apply-coverage parcels-data "STR_ID" temp-id
  ;; might get some new NaN values, so clean up farm-land and not-farm-land patch-sets
  let more-not-farm-land farm-land with [not is-string? temp-id]
  ask more-not-farm-land [ set pcolor bgcolor ]
  set not-farm-land (patch-set not-farm-land more-not-farm-land)
  ;; could use not-farm-land membership in border drawing but that is slow, so
  ;; make 'the-owner' of not-farm-land patches noboday (which is apt...)
  ask not-farm-land [ set the-owner nobody ]
  set farm-land farm-land with [not member? self more-not-farm-land]
  ;; temp-id is numeric in the random initialisation so make it numeric here to match
  ask farm-land [ set temp-id read-from-string temp-id ]
end

;; random process uses random farm centres from sequential spatial inhibition
;; and either averaging or a voter model to LUC
to setup-random-geography
  ifelse seed-geography-rng?
  [ random-seed rng-geography ]
  [ random-seed random timer ]
  set farm-land patch-set patches
  set not-farm-land patch-set nobody
  ;; use disposable node agents to make voronoi polygon farms
  ;; the inhibition distance is 0.4 * expected mean NND for random point process
  let inhibition-distance 0.4 / (2 * sqrt (number-of-farms / world-width / world-height))
  print word "Setting inhibition distance for farm centres to " precision inhibition-distance 3
  create-nodes number-of-farms [ 
    ;; to avoid teeny tiny farms use sequential-spatial inhibition
    ;; first check that the set distance is reasonable
    while [any? other nodes in-radius inhibition-distance] [
      setxy random-xcor random-ycor 
    ]
  ]
  ;; assign temp-id which will be used to make up farms later
  ask patches [ set temp-id [who] of min-one-of (nodes with-min [distance myself]) [who] ]
  ;; get rid of the temporary farm generator turtles
  ask nodes [ die ]
  setup-random-luc-codes
end

;; use a either spatial averaging or a voter model to set up LUC codes
to setup-random-luc-codes
  set farm-land patches
  ifelse random-landscape-method = "averaging" [
    ;; averaging method
    ask patches [ set luc-code random-normal 0 1 ]
    repeat luc-aggregation-steps [ diffuse4 luc-code (4 / 5) ]
    let min-x min [luc-code] of patches
    let max-x max [luc-code] of patches
    ;; rescale range and bin them from 1 to 8
    ask patches [
      set luc-code round rescale luc-code min-x max-x 0.5 8.4999
    ]
  ]
  [ ;; voter model method - this may yield wildly uneven distributions!
    ask patches [ set luc-code 1 + random 8 ]
    repeat luc-aggregation-steps [
      ask patches [ set luc-code [luc-code] of one-of neighbors4 ]
    ]
  ]
  colour-patches false
  display
end

to setup-farmers 
  let ids remove-duplicates [farm-id] of farm-land
  let psets map [id -> farm-land with [farm-id = id]] ids
  (foreach psets ids [ [pset id] ->
    let this-farmer nobody
    ask approximate-centroid pset [
      sprout-farmers 1 [
        initialise-farmer
        set the-land pset
        set this-farmer self
      ]
      ask pset [
        set the-owner this-farmer
        set landuse [farm-type] of this-farmer
      ]
    ]
  ])
end

to setup-farms
  ask farmers [
    let this-farm nobody
    hatch-farms 1 [
      initialise-farm
      set this-farm self
    ]
    set my-farm this-farm
  ]
end

to setup-holdings
  ask farms [
    let this-holding nobody
    let these-holdings (turtle-set nobody)
    let ids remove-duplicates [holding-id] of the-land
    let psets map [id -> the-land with [holding-id = id]] ids 
    (foreach psets ids [ [pset id] ->
      hatch-holdings 1 [
        initialise-holding
        set the-land pset
        set landuse-luc-profile get-landuse-luc-profile the-land
        move-to approximate-centroid pset
        set this-holding self
      ]
      set these-holdings (turtle-set these-holdings this-holding)
    ])
    ask my-farmer [ 
      set my-holdings these-holdings 
      ask my-farm [ set my-holdings these-holdings ]
    ]
    set my-holdings these-holdings
  ]
end

;; use temp-id to assign sets of patches to farmers - actually happens the other way
;; around: patches already have a farm-id label that is use to collect them into
;; patch sets for farmers, who are then placed at the approximate centroid of the
;; patch set
to assign-patches-to-farmers
  ;; do this with a list to ensure assignment is repeatable
  clear-drawing
  foreach remove-duplicates [farm-id] of farm-land [ id ->
    let this-farms-land farm-land with [farm-id = id]
    if any? this-farms-land [
      let this-farmer nobody
      ask approximate-centroid this-farms-land [
        sprout-farmers 1 [
          initialise-farmer
          set the-land this-farms-land
          set this-farmer self
        ]
      ]
      ;; make sure the patches know who is boss...
      ask this-farms-land [
        set the-owner this-farmer
      ]
    ]
  ]
end

;; returns approximate centroid of a patch-set
to-report approximate-centroid [poly]
  let centroid nobody
  with-local-randomness [
    let mean-x mean [pxcor] of poly
    let mean-y mean [pycor] of poly
    ;; make sure it's actually a patch in the set
    set centroid one-of poly with-min [distancexy mean-x mean-y]
  ]
  report centroid
end

;; now we have farmers and land they own we can make farms!
to assign-farms-to-farmers
  ;; do this with a list to ensure assignment is repeatable
  ask farmers [
    let this-farm nobody
    hatch-farms 1 [
      initialise-farm
      set this-farm self
    ]
    set my-farm this-farm
  ]
end

;; ---------------------------------------
;; labelling of connected sets of patches
;; ---------------------------------------

;; This can also be done by iterated assembly of neighbouring patches starting at some
;; root - however, the nw extension's weak clusters method provides a quicker and more
;; scaleable solution, even if it involves creating and killing thousands of node turtles!

;; Labels a list of patchsets based on the named supplied variable, with the labels sequential
;; and unique across the list of all patchsets
;; The resulting label is stored in the region-id attribute and IS NOT merely the value of the 
;; supplied variable (that would be trivial!) because regions that share a value of that 
;; variable may not be orthogonally connected.
to label-connected-regions [patch-sets region-var n4?]
  let i 0
  foreach patch-sets [ ps ->
    set i label-connected-region ps region-var i n4?
  ]
end

;; Labels the supplied patchset pset with respect to the region-var attribute, starting from id0
;; reports 'where it got to' so that the calling context can continue on to label more patchsets
;; starting from the next value. Implementation uses the nw:weak-component-clusters reporter
to-report label-connected-region [pset region-var id0 n4?]
  ask pset [ sprout-nodes 1 ]
  ask nodes [
    ifelse n4? [
      ask (nodes-on neighbors4) with [x1-var-matches-x2-var? self myself region-var] [
        create-link-with myself
      ]
    ]
    [
      ask (nodes-on neighbors) with [x1-var-matches-x2-var? self myself region-var] [
        create-link-with myself
      ]
    ]
  ]
  nw:set-context nodes links
  foreach nw:weak-component-clusters [ c ->
    ask c [ set region-id id0 ]
    set id0 id0 + 1
  ]
  ask nodes [die]
  report id0
end

;; merges isolated singletons - NOT CONFIDENT OF THIS IMPLEMENTATION
;; TODO: would also like to extend this to filter out connected regions smaller than
;; some threshold value
to merge-singletons [pset var setter]
  let singletons get-singletons pset var
  while [any? singletons] [
    ifelse count pset = count singletons [
      ask singletons [
        let p one-of singletons
        let others [ other singletons ] of p
        foreach sort others [ q ->
          set-x1-var-to-x2-var p q setter
        ]
      ]
    ]
    [
      ask singletons [
        let non-singleton-neighbours neighbors4 with [member? self pset and not member? self singletons]
        if any? non-singleton-neighbours [
          set-x1-var-to-x2-var self one-of non-singleton-neighbours setter
        ]
      ]
    ]
    set singletons get-singletons pset var
  ]
end

;; this only detects singleton members of pset with neighbors4 with matching values of var
to-report get-singletons [pset var]
  report pset with [not any? neighbors4 with [x1-var-matches-x2-var? self myself var and member? self pset]]
end


;; The MIT License (MIT)
;;
;; Copyright (c) 2023-24 David O'Sullivan
;;
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.